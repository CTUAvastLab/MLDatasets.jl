export TUDataset

using DataDeps
# using ..MLDatasets: datafile, datadir
using DelimitedFiles: readdlm

function __init__tudataset()
    DEPNAME = "TUDataset"
    LINK = "https://www.chrsmrrs.com/graphkerneldatasets"
    DOCS = ""
    DATA = "PROTEINS.zip"

    register(DataDep(
        DEPNAME,
        """
        Dataset: The $DEPNAME dataset.
        Website: $LINK)
        """,
        "$LINK/$DATA",
        # "81de017067dc045ebdb8ffd5c0e69a209973ffdb1fe2d5b434e94d3614f3f5c7",  # if checksum omitted, will be generated by DataDeps
        post_fetch_method = unpack
    ))
end

struct TUDataset
    num_nodes::Int
    num_edges::Int
    num_graphs::Int
    source::Vector{Int}
    target::Vector{Int}
    graph_indicator
    node_labels::Vector{Int}
    edge_labels::Union{Nothing, Vector{Int}}
    graph_labels
    node_attributes
    edge_attributes
    graph_attributes
end

"""
    TUDataset

A variety of graph kernel benchmark datasets, *.e.g.* "IMDB-BINARY",
"REDDIT-BINARY" or "PROTEINS", collected from the [TU Dortmund University](https://chrsmrrs.github.io/datasets).

    dataset(name; dir=nothing)

Retrieve the TUDataset dataset. The output is an object with fields

```
num_nodes
num_edges
num_graphs
source              # vector of edges' source vectors      
target              # vector of edges' target vectors
graph_indicator     # graph
node_labels
edge_labels
graph_labels
node_attributes
edge_attributes
graph_attributes
```

See [this link](https://chrsmrrs.github.io/datasets/docs/datasets/)
for a list of the available datasets.
"""
function TUDataset(name; dir=nothing)
    d = datadir("TUDataset", dir)
    # See here for the file format https://chrsmrrs.github.io/datasets/docs/format/
    st = readdlm(joinpath(d, name, "$(name)_A.txt"), ',', Int)
   
    # Check that the first node is labeled 1.
    # TODO this will fail if the first node is isolated
    @assert minimum(st) == 1

    graph_indicator = readdlm(joinpath(d, name, "$(name)_graph_indicator.txt"), Int) |> vec      
    @assert all(sort(unique(graph_indicator)) .== 1:length(unique(graph_indicator)))

    node_labels = readdlm(joinpath(d, name, "$(name)_node_labels.txt"), Int) |> vec
    graph_labels = readdlm(joinpath(d, name, "$(name)_graph_labels.txt"), Int) |> vec

    # LOAD OPTIONAL FILES IF EXIST
    
    if isfile(joinpath(d, name, "$(name)_edge_labels.txt"))
        edge_labels = readdlm(joinpath(d, name, "$(name)_edge_labels.txt")) |> vec
    else
        edge_labels = nothing
    end
    if isfile(joinpath(d, name, "$(name)_node_attributes.txt"))
        node_attributes = readdlm(joinpath(d, name, "$(name)_node_attributes.txt"), Float32)' |> collect
    else
        node_attributes = nothing
    end
    if isfile(joinpath(d, name, "$(name)_edge_attributes.txt"))
        edge_attributes = readdlm(joinpath(d, name, "$(name)_edge_attributes.txt"), Float32)' |> collect
    else
        edge_attributes = nothing
    end
    if isfile(joinpath(d, name, "$(name)_graph_attributes.txt"))
        graph_attributes = readdlm(joinpath(d, name, "$(name)_graph_attributes.txt"), Float32)' |> collect
    else
        graph_attributes = nothing
    end


    TUDataset( length(node_labels), size(st, 1), length(graph_labels),
                st[:,1], st[:,2], 
                graph_indicator,
                node_labels,
                edge_labels,            
                graph_labels,
                node_attributes, 
                edge_attributes,
                graph_attributes)
end


function Base.getindex(data::TUDataset, i)
    node_mask = data.graph_indicator .∈ Ref(i)
    graph_indicator = data.graph_indicator[node_mask]
    
    nodes = (1:data.num_nodes)[node_mask]
    node_labels = data.node_labels[node_mask]
    nodemap = Dict(v => i for (i, v) in enumerate(nodes))

    edge_mask = data.source .∈ Ref(nodes) 
    source = [nodemap[i] for i in data.source[edge_mask]]
    target = [nodemap[i] for i in data.target[edge_mask]]
    edge_labels = isnothing(data.edge_labels) ? nothing : data.edge_labels[edge_mask]

    graph_labels = data.graph_labels[i]
    
    node_attributes = isnothing(data.node_attributes) ? nothing : data.node_attributes[:,node_mask]
    edge_attributes = isnothing(data.edge_attributes) ? nothing : data.edge_attributes[:,edge_mask]
    graph_attributes = isnothing(data.graph_attributes) ? nothing : data.graph_attributes[:,i]


    @assert source isa Vector
    @assert target isa Vector
    @assert node_labels isa Vector
    TUDataset(length(nodes), length(source), length(graph_labels),
            source, target, 
            graph_indicator,
            node_labels,
            edge_labels,            
            graph_labels,
            node_attributes, 
            edge_attributes,
            graph_attributes)
end
